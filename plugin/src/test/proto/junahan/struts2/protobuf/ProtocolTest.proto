/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
syntax = "proto2";

package junahan.struts2.protobuf;

option java_package="com.github.junahan.struts2.test.protocol";
option java_multiple_files = true;
option optimize_for = SPEED;

import "junahan/struts2/protobuf/protocol.proto";

message ScalarValueTypeTestMessage {
    optional int32 aInt32 = 1;
    optional int64 aInt64 = 3;
    optional float aFloat = 5;
    optional double aDouble = 7;
    optional uint32 aUint32 = 9;
    optional uint64 aUint64 = 11;
    optional sint32 aSmall32 = 13;
    optional sint64 aSmall64 = 15;
    optional fixed32 aFixed32 = 19;
    optional fixed64 aFixed64 = 21;
    optional sfixed32 aSFixed32 = 23;
    optional sfixed64 aSFixed64 = 25;
    optional bool aBool = 38;
    optional string aString = 39;
    optional bytes aBytes = 41;
    optional EStatus aStatus = 43;
}

enum EnumAllowingAlias {
  option allow_alias = true;
  UNKNOWN = 0;
  STARTED = 1;
  RUNNING = 1;
}

message EnumAliasTestMessage {
    optional int32 a_field = 1;
    optional EnumAllowingAlias a_allowing_alias_enum = 3;
}

message RepeatedField {
  repeated int32 ids = 1;
  repeated EnumAliasTestMessage test_messages = 3;
}

// nested message type
message Outer {                  // Level 0
  message MiddleAA {  // Level 1
    message Inner {   // Level 2
      required int64 ival = 1;
      optional bool  booly = 2;
    }
  }
  message MiddleBB {  // Level 1
    message Inner {   // Level 2
      required int32 ival = 1;
      optional bool  booly = 2;
    }
  }
}

// extension message
message Foo {
  optional string name = 1;
  
  //...
  extensions 100 to 199;
}

extend Foo {
  optional int32 bar = 126;
  optional int32 misc = 127;
}

// nested extension
message Baz {
  extend Foo {
    optional int32 bar = 130;
  }
  
  optional int32 misc = 1;
}

// A common pattern - define extensions inside the scope of the extension's field type
message Baz2 {
  extend Foo {
    optional Baz2 foo_ext = 140;
  }
  
  optional int32 misc = 1;
}

// oneof message 
message SubMessage {
    optional string sub_name = 1;
}

message SampleMessage {
  oneof test_oneof {
     string name = 4;
     SubMessage sub_message = 9;
  }
}

message SampleRepeatedMessage {
    repeated SubMessage sub_messages = 1;
}

// maps message
message Baz3 {
    optional string name = 1;
}

message Foo3 {
    map<string, Baz3>  bazs= 1;
}

message MapFieldEntry {
    optional string key = 1;
    optional Baz3 value = 2;
}

message Foo4 {
    repeated MapFieldEntry baz = 1;
}

message TestRequest {
    optional ScalarValueTypeTestMessage scal_value_type_message = 1;
    optional Foo foo = 3;
    optional SampleMessage sample_message = 5;
    repeated string keywords = 7;
    optional EnumAllowingAlias alias = 9;
    optional string echo_message = 100; 
    
    extensions 5000 to max;
}

extend TestRequest {
    optional string request_ext = 5100;
}

message TestResponse {
    optional string echo_message = 10;
    
    extensions 5000 to max;
}
